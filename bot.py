import os
import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler
from datetime import datetime, timedelta
import logging
import psycopg2
from psycopg2.extras import RealDictCursor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN')

def get_db_connection():
    try:
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            logger.error("DATABASE_URL environment variable is not set")
            return None
        
        logger.info(f"Connecting to database: {database_url.split('@')[-1] if '@' in database_url else 'hidden'}")
        
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å SSL
        conn = psycopg2.connect(
            database_url,
            sslmode='require'
        )
        logger.info("‚úÖ Successfully connected to PostgreSQL")
        return conn
        
    except Exception as e:
        logger.error(f"‚ùå Database connection error: {e}")
        return None

def get_next_saturday():
    today = datetime.now()
    days_until_saturday = (5 - today.weekday()) % 7
    if days_until_saturday == 0:
        days_until_saturday = 7
    return (today + timedelta(days=days_until_saturday)).strftime("%d.%m.%Y")

next_saturday = get_next_saturday()

def get_or_create_user(telegram_user):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute(
            'SELECT user_id, first_name, full_name, qr_code FROM users WHERE user_id = %s', 
            (telegram_user.id,)
        )
        user = cursor.fetchone()
        
        if user is None:
            cursor.execute('''
                INSERT INTO users (user_id, first_name, last_name, full_name, telegram_name)
                VALUES (%s, %s, %s, %s, %s)
            ''', (
                telegram_user.id,
                telegram_user.first_name or '',
                telegram_user.last_name or '',
                telegram_user.full_name or '',
                getattr(telegram_user, 'name', '') or '',
            ))
            conn.commit()
            
            cursor.execute(
                'SELECT user_id, first_name, full_name, qr_code FROM users WHERE user_id = %s', 
                (telegram_user.id,)
            )
            user = cursor.fetchone()
    
    return user

def get_or_create_event(location_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute(
            'SELECT event_id FROM events WHERE location_id = %s AND event_date = %s', 
            (location_id, next_saturday)
        )
        event = cursor.fetchone()
        
        if event is None:
            cursor.execute('''
                INSERT INTO events (location_id, event_date)
                VALUES (%s, %s)
            ''', (
                location_id,
                next_saturday
            ))
            conn.commit()
            
            cursor.execute(
                'SELECT event_id FROM events WHERE location_id = %s AND event_date = %s', 
                (location_id, next_saturday)
            )
            event = cursor.fetchone()
    
    return event

def get_event_data(location_id):
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                R.role_id,
                R.role_full_name, 
                COALESCE(U.full_name, '') as volunteer_name,
                U.telegram_name
            FROM roles AS R
            LEFT JOIN volunteers AS V ON V.role_id = R.role_id 
                AND V.event_id IN (
                    SELECT event_id FROM events 
                    WHERE event_date = %s AND location_id = %s
                )
            LEFT JOIN users AS U ON U.user_id = V.user_id
            ORDER BY R.sort_id
        ''', (next_saturday, location_id))
        
        positions = cursor.fetchall()
        
        if not positions:
            return None
    
    return positions

def add_volunteer_to_event(role_text, user_id, event_id):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º role_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ä–æ–ª–∏
            cursor.execute(
                'SELECT role_id FROM roles WHERE role_full_name = %s', 
                (role_text,)
            )
            role_result = cursor.fetchone()
            
            if not role_result:
                logger.error(f"–†–æ–ª—å '{role_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
                
            role_id = role_result['role_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç—É —Ä–æ–ª—å
            cursor.execute(
                'SELECT volunteer_id FROM volunteers WHERE event_id = %s AND user_id = %s', 
                (event_id, user_id)
            )
            existing_volunteer = cursor.fetchone()
            
            if existing_volunteer:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute(
                    'UPDATE volunteers SET role_id = %s WHERE volunteer_id = %s',
                    (role_id, existing_volunteer['volunteer_id'])
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute('''
                    INSERT INTO volunteers (user_id, role_id, event_id)
                    VALUES (%s, %s, %s)
                ''', (user_id, role_id, event_id))
            
            conn.commit()
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞: {e}")
        return False

def remove_volunteer_from_event(user_id, event_id):
    try:
        with get_db_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                'DELETE FROM volunteers WHERE event_id = %s AND user_id = %s', 
                (event_id, user_id)
            )
            conn.commit()
            return cursor.rowcount > 0
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        return False

def check_parameters(user, location_id):
    if not user:
        return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É /start"
        
    if not location_id:
        check_text = (
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: /location –ê–Ω–≥–∞—Ä–∫–∞\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –Ω–∞–±–µ—Ä–∏ /locationlist"
        )
        return check_text
    
    return None

def get_position_text(location_name, positions):
    position_lines = []
    for pos in positions:
        line = f"‚Ä¢ {pos['role_full_name']}"
        if pos['volunteer_name']:
            line += f" - {pos['volunteer_name']}"
        if pos['telegram_name']:
            line += f" @{pos['telegram_name']}"
        position_lines.append(line)

    event_text = (
        f"–î–∞—Ç–∞: {next_saturday}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {location_name}\n\n" 
        "üìã –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π\n\n" + "\n".join(position_lines) + "\n\n"
    )

    return event_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(update.effective_user)
    context.user_data['current_user'] = user
    
    user_name = update.effective_user.first_name
    if not user_name:
        user_name = "–¥—Ä—É–≥"

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø —á–∞—Ç-–±–æ—Ç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤.\n"
        "–ü–æ–º–æ–≥–∞—é —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–±–µ–≥.\n\n"
    )
    await update.message.reply_text(welcome_text)

    check_text = check_parameters(user, None)

    if check_text:
        await update.message.reply_text(check_text)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    command_text = update.message.text
    user = context.user_data.get('current_user')
    location = context.user_data.get('current_location')
    event = context.user_data.get('current_event')

    if not user or not location:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ /start –∏ –≤—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ /location")
        return

    check_text = check_parameters(user, location['location_id'])

    if check_text:
        await update.message.reply_text(check_text)
        return

    if '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è' in command_text.lower():
        keyboard = [
            ["üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∑–∞–±–µ–≥–∞", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤", "üíª –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"],
            ["üèÉ‚Äç‚ôÇ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞—Å—Å—ã", "ü§∏‚Äç‚ôÇ –†–∞–∑–º–∏–Ω–∫–∞", "üèÉ‚Äç‚ôÇ –ó–∞–º—ã–∫–∞—é—â–∏–π"],
            ["‚è±Ô∏è –°–µ–∫—É–Ω–¥–æ–º–µ—Ä", "üé´ –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∑–∏—Ü–∏–π", "üì± –°–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤"],
            ["üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ", "‚òï –ë—É—Ñ–µ—Ç", "‚ùì –î—Ä—É–≥–æ–µ"],
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=reply_markup)
        return
    
    if '–æ—Ç–º–µ–Ω–∏—Ç—å' in command_text.lower():
        success = remove_volunteer_from_event(user['user_id'], event['event_id'])
        if success:
            positions = get_event_data(location['location_id'])
            if positions:
                await update.message.reply_text(get_position_text(location['location_name'], positions))
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
        return
       
    success = add_volunteer_to_event(command_text, user['user_id'], event['event_id'])
    if success:
        positions = get_event_data(location['location_id'])
        if positions:
            event_text = get_position_text(location['location_name'], positions)

        keyboard = [
            ["‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(event_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é")

async def location_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    
    if message_text.startswith('/location'):
        location_name = message_text[len('/location'):].strip()
    else:
        location_name = message_text

    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "SELECT location_id, location_name FROM locations WHERE location_name = %s AND statecode = 0 LIMIT 1", 
            (location_name,)
        )
        location = cursor.fetchone()
        
        if location:
            context.user_data['current_location'] = location

            event = get_or_create_event(location['location_id'])
            context.user_data['current_event'] = event

            positions = get_event_data(location['location_id'])

            if positions:
                event_text = get_position_text(location['location_name'], positions)

            keyboard = [
                ["‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"],
            ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(event_text, reply_markup=reply_markup)

        else:
            event_text = "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏."  
            await update.message.reply_text(event_text)

        user = context.user_data.get('current_user')
        check_text = check_parameters(user, location['location_id'] if location else None)
        if check_text:
            await update.message.reply_text(check_text)   
            return

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–æ–∫–∞—Ü–∏–∏: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ location_command: {e}")
        
    finally:
        cursor.close()
        conn.close()

async def location_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("SELECT location_name FROM locations WHERE statecode = 0 ORDER BY location_name")
        locations = cursor.fetchall()
        
        if locations:
            location_text = "üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π:\n\n" + "\n".join([f"‚Ä¢ {loc['location_name']}" for loc in locations])
        else:
            location_text = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π"
            
        await update.message.reply_text(location_text)
        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ location_list: {e}")
        
    finally:
        cursor.close()
        conn.close()

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/locationlist - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "üìã –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é —Å –∑–∞–ø–∏—Å—å—é –≤ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ –î–∞—é –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∑–∞–±–µ–≥–∞ –æ –Ω–∞–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ\n"
    )
    await update.message.reply_text(help_text)

def main():
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("location", location_command))
    application.add_handler(CommandHandler("locationlist", location_list))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    while True:
        try:
            application.run_polling()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

if __name__ == "__main__":
    main()